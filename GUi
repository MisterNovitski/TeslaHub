
local SimpleTabGui = {}
SimpleTabGui.__index = SimpleTabGui
SimpleTabGui.Version = "1.0.0"
SimpleTabGui.Options = {}

-- Helper function to create a UI element
local function createElement(class, properties)
    local element = Instance.new(class)
    for key, value in pairs(properties) do
        element[key] = value
    end
    return element
end

-- Notify function
function SimpleTabGui:Notify(options)
    local notification = createElement("Frame", {
        Parent = self.ScreenGui,
        Size = UDim2.new(0, 300, 0, 100),
        Position = UDim2.new(1, -310, 1, -110),
        BackgroundColor3 = Color3.fromRGB(40, 40, 40),
        BorderSizePixel = 0
    })
    
    createElement("UICorner", { CornerRadius = UDim.new(0, 8), Parent = notification })
    
    local title = createElement("TextLabel", {
        Parent = notification,
        Size = UDim2.new(1, -20, 0, 20),
        Position = UDim2.new(0, 10, 0, 10),
        BackgroundTransparency = 1,
        Text = options.Title or "Notification",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 16,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    local content = createElement("TextLabel", {
        Parent = notification,
        Size = UDim2.new(1, -20, 0, 40),
        Position = UDim2.new(0, 10, 0, 35),
        BackgroundTransparency = 1,
        Text = options.Content or "",
        TextColor3 = Color3.fromRGB(200, 200, 200),
        TextSize = 14,
        Font = Enum.Font.Gotham,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextWrapped = true
    })
    
    if options.Duration then
        task.spawn(function()
            wait(options.Duration)
            notification:Destroy()
        end)
    end
    
    return notification
end

-- Create a new window
function SimpleTabGui:CreateWindow(options)
    local self = setmetatable({}, SimpleTabGui)
    
    self.ScreenGui = createElement("ScreenGui", {
        Name = "SimpleTabGui",
        Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui"),
        ResetOnSpawn = false,
        IgnoreGuiInset = true
    })
    
    self.MainFrame = createElement("Frame", {
        Name = "MainFrame",
        Parent = self.ScreenGui,
        Size = options.Size or UDim2.fromOffset(580, 460),
        Position = UDim2.new(0.5, -290, 0.5, -230),
        BackgroundColor3 = Color3.fromRGB(30, 30, 30),
        BorderSizePixel = 0
    })
    
    createElement("UICorner", { CornerRadius = UDim.new(0, 8), Parent = self.MainFrame })
    
    self.TitleBar = createElement("Frame", {
        Name = "TitleBar",
        Parent = self.MainFrame,
        Size = UDim2.new(1, 0, 0, 40),
        BackgroundColor3 = Color3.fromRGB(40, 40, 40),
        BorderSizePixel = 0
    })
    
    createElement("UICorner", { CornerRadius = UDim.new(0, 8), Parent = self.TitleBar })
    
    self.TitleLabel = createElement("TextLabel", {
        Name = "TitleLabel",
        Parent = self.TitleBar,
        Size = UDim2.new(1, -40, 0, 20),
        Position = UDim2.new(0, 10, 0, 5),
        BackgroundTransparency = 1,
        Text = options.Title or "Simple Tab GUI",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 16,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    self.SubTitleLabel = createElement("TextLabel", {
        Name = "SubTitleLabel",
        Parent = self.TitleBar,
        Size = UDim2.new(1, -40, 0, 15),
        Position = UDim2.new(0, 10, 0, 25),
        BackgroundTransparency = 1,
        Text = options.SubTitle or "",
        TextColor3 = Color3.fromRGB(200, 200, 200),
        TextSize = 12,
        Font = Enum.Font.Gotham,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    self.CloseButton = createElement("TextButton", {
        Name = "CloseButton",
        Parent = self.TitleBar,
        Size = UDim2.new(0, 30, 0, 30),
        Position = UDim2.new(1, -35, 0.5, -15),
        BackgroundColor3 = Color3.fromRGB(255, 50, 50),
        Text = "X",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        Font = Enum.Font.Gotham,
        TextSize = 14
    })
    
    createElement("UICorner", { CornerRadius = UDim.new(0, 4), Parent = self.CloseButton })
    
    self.CloseButton.MouseButton1Click:Connect(function()
        self.ScreenGui:Destroy()
    end)
    
    self.TabContainer = createElement("Frame", {
        Name = "TabContainer",
        Parent = self.MainFrame,
        Size = UDim2.new(1, 0, 0, 40),
        Position = UDim2.new(0, 0, 0, 40),
        BackgroundColor3 = Color3.fromRGB(35, 35, 35),
        BorderSizePixel = 0
    })
    
    createElement("UIListLayout", {
        Parent = self.TabContainer,
        FillDirection = Enum.FillDirection.Horizontal,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5)
    })
    
    self.ContentFrame = createElement("Frame", {
        Name = "ContentFrame",
        Parent = self.MainFrame,
        Size = UDim2.new(1, 0, 1, -80),
        Position = UDim2.new(0, 0, 0, 80),
        BackgroundTransparency = 1
    })
    
    self.Tabs = {}
    self.ActiveTab = nil
    
    return self
end

-- Add a new tab
function SimpleTabGui:AddTab(options)
    local tab = {}
    tab.Title = options.Title or "Tab"
    tab.Icon = options.Icon or ""
    
    tab.Button = createElement("TextButton", {
        Name = tab.Title .. "Button",
        Parent = self.TabContainer,
        Size = UDim2.new(0, options.TabWidth or 120, 1, 0),
        BackgroundColor3 = Color3.fromRGB(50, 50, 50),
        Text = tab.Title,
        TextColor3 = Color3.fromRGB(200, 200, 200),
        Font = Enum.Font.Gotham,
        TextSize = 14,
        AutoButtonColor = false
    })
    
    createElement("UICorner", { CornerRadius = UDim.new(0, 4), Parent = tab.Button })
    
    tab.Content = createElement("ScrollingFrame", {
        Name = tab.Title .. "Content",
        Parent = self.ContentFrame,
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundColor3 = Color3.fromRGB(30, 30, 30),
        BorderSizePixel = 0,
        CanvasSize = UDim2.new(0, 0, 0, 0),
        ScrollBarThickness = 6,
        Visible = false
    })
    
    createElement("UICorner", { CornerRadius = UDim.new(0, 8), Parent = tab.Content })
    createElement("UIPadding", {
        Parent = tab.Content,
        PaddingTop = UDim.new(0, 10),
        PaddingBottom = UDim.new(0, 10),
        PaddingLeft = UDim.new(0, 10),
        PaddingRight = UDim.new(0, 10)
    })
    
    tab.ContentList = createElement("UIListLayout", {
        Parent = tab.Content,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5)
    })
    
    local function activate()
        if self.ActiveTab then
            self.ActiveTab.Button.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            self.ActiveTab.Button.TextColor3 = Color3.fromRGB(200, 200, 200)
            self.ActiveTab.Content.Visible = false
        end
        tab.Button.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
        tab.Button.TextColor3 = Color3.fromRGB(255, 255, 255)
        tab.Content.Visible = true
        self.ActiveTab = tab
    end
    
    tab.Button.MouseButton1Click:Connect(activate)
    
    table.insert(self.Tabs, tab)
    
    if #self.Tabs == 1 then
        activate()
    end
    
    return tab
end

-- Select a specific tab
function SimpleTabGui:SelectTab(index)
    if self.Tabs[index] then
        local tab = self.Tabs[index]
        if self.ActiveTab then
            self.ActiveTab.Button.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            self.ActiveTab.Button.TextColor3 = Color3.fromRGB(200, 200, 200)
            self.ActiveTab.Content.Visible = false
        end
        tab.Button.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
        tab.Button.TextColor3 = Color3.fromRGB(255, 255, 255)
        tab.Content.Visible = true
        self.ActiveTab = tab
    end
end

-- Add paragraph
function SimpleTabGui:AddParagraph(options)
    local paragraph = createElement("TextLabel", {
        Parent = self.Content,
        Size = UDim2.new(1, -20, 0, 50),
        BackgroundTransparency = 1,
        Text = options.Title .. "\n" .. (options.Content or ""),
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 14,
        Font = Enum.Font.Gotham,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextWrapped = true
    })
    self.Content.CanvasSize = UDim2.new(0, 0, 0, self.ContentList.AbsoluteContentSize.Y)
    return paragraph
end

-- Add button
function SimpleTabGui:AddButton(options)
    local button = createElement("TextButton", {
        Parent = self.Content,
        Size = UDim2.new(1, -20, 0, 40),
        BackgroundColor3 = Color3.fromRGB(60, 60, 60),
        Text = options.Title or "Button",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        Font = Enum.Font.Gotham,
        TextSize = 14
    })
    
    createElement("UICorner", { CornerRadius = UDim.new(0, 4), Parent = button })
    
    if options.Description then
        local desc = createElement("TextLabel", {
            Parent = button,
            Size = UDim2.new(1, -10, 0, 15),
            Position = UDim2.new(0, 5, 1, 0),
            BackgroundTransparency = 1,
            Text = options.Description,
            TextColor3 = Color3.fromRGB(200, 200, 200),
            TextSize = 12,
            Font = Enum.Font.Gotham,
            TextXAlignment = Enum.TextXAlignment.Left
        })
    end
    
    button.MouseButton1Click:Connect(function()
        if options.Callback then
            options.Callback()
        end
    end)
    
    self.Content.CanvasSize = UDim2.new(0, 0, 0, self.ContentList.AbsoluteContentSize.Y)
    return button
end

-- Add toggle
function SimpleTabGui:AddToggle(id, options)
    local toggle = {}
    toggle.Value = options.Default or false
    
    local frame = createElement("Frame", {
        Parent = self.Content,
        Size = UDim2.new(1, -20, 0, 40),
        BackgroundTransparency = 1
    })
    
    local label = createElement("TextLabel", {
        Parent = frame,
        Size = UDim2.new(1, -50, 0, 20),
        Position = UDim2.new(0, 0, 0, 0),
        BackgroundTransparency = 1,
        Text = options.Title or "Toggle",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 14,
        Font = Enum.Font.Gotham,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    local toggleButton = createElement("TextButton", {
        Parent = frame,
        Size = UDim2.new(0, 30, 0, 20),
        Position = UDim2.new(1, -30, 0, 0),
        BackgroundColor3 = toggle.Value and Color3.fromRGB(0, 120, 215) or Color3.fromRGB(60, 60, 60),
        Text = "",
        AutoButtonColor = false
    })
    
    createElement("UICorner", { CornerRadius = UDim.new(0, 4), Parent = toggleButton })
    
    toggle.SetValue = function(value)
        toggle.Value = value
        toggleButton.BackgroundColor3 = value and Color3.fromRGB(0, 120, 215) or Color3.fromRGB(60, 60, 60)
        if options.Callback then
            options.Callback(value)
        end
    end
    
    toggleButton.MouseButton1Click:Connect(function()
        toggle:SetValue(not toggle.Value)
    end)
    
    SimpleTabGui.Options[id] = toggle
    self.Content.CanvasSize = UDim2.new(0, 0, 0, self.ContentList.AbsoluteContentSize.Y)
    return toggle
end

-- Add slider
function SimpleTabGui:AddSlider(id, options)
    local slider = {}
    slider.Value = options.Default or options.Min or 0
    
    local frame = createElement("Frame", {
        Parent = self.Content,
        Size = UDim2.new(1, -20, 0, 60),
        BackgroundTransparency = 1
    })
    
    local label = createElement("TextLabel", {
        Parent = frame,
        Size = UDim2.new(1, -50, 0, 20),
        Position = UDim2.new(0, 0, 0, 0),
        BackgroundTransparency = 1,
        Text = options.Title or "Slider",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 14,
        Font = Enum.Font.Gotham,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    local sliderBar = createElement("Frame", {
        Parent = frame,
        Size = UDim2.new(1, -10, 0, 10),
        Position = UDim2.new(0, 5, 0, 30),
        BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    })
    
    createElement("UICorner", { CornerRadius = UDim.new(0, 4), Parent = sliderBar })
    
    local fill = createElement("Frame", {
        Parent = sliderBar,
        Size = UDim2.new((slider.Value - options.Min) / (options.Max - options.Min), 0, 1, 0),
        BackgroundColor3 = Color3.fromRGB(0, 120, 215)
    })
    
    createElement("UICorner", { CornerRadius = UDim.new(0, 4), Parent = fill })
    
    slider.SetValue = function(value)
        value = math.clamp(math.round(value / options.Rounding) * options.Rounding, options.Min, options.Max)
        slider.Value = value
        fill.Size = UDim2.new((value - options.Min) / (options.Max - options.Min), 0, 1, 0)
        if options.Callback then
            options.Callback(value)
        end
    end
    
    sliderBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            local mouse = game.Players.LocalPlayer:GetMouse()
            local connection
            connection = game:GetService("RunService").RenderStepped:Connect(function()
                local x = math.clamp((mouse.X - sliderBar.AbsolutePosition.X) / sliderBar.AbsoluteSize.X, 0, 1)
                local value = options.Min + x * (options.Max - options.Min)
                slider:SetValue(value)
            end)
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    connection:Disconnect()
                end
            end)
        end
    end)
    
    SimpleTabGui.Options[id] = slider
    self.Content.CanvasSize = UDim2.new(0, 0, 0, self.ContentList.AbsoluteContentSize.Y)
    return slider
end

-- Add dropdown
function SimpleTabGui:AddDropdown(id, options)
    local dropdown = {}
    dropdown.Value = options.Default or (options.Multi and {} or options.Values[1])
    
    local frame = createElement("Frame", {
        Parent = self.Content,
        Size = UDim2.new(1, -20, 0, 40),
        BackgroundTransparency = 1
    })
    
    local label = createElement("TextLabel", {
        Parent = frame,
        Size = UDim2.new(1, -50, 0, 20),
        Position = UDim2.new(0, 0, 0, 0),
        BackgroundTransparency = 1,
        Text = options.Title or "Dropdown",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 14,
        Font = Enum.Font.Gotham,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    local dropdownButton = createElement("TextButton", {
        Parent = frame,
        Size = UDim2.new(1, -10, 0, 20),
        Position = UDim2.new(0, 5, 0, 20),
        BackgroundColor3 = Color3.fromRGB(60, 60, 60),
        Text = options.Multi and table.concat(options.Default or {}, ", ") or tostring(options.Default),
        TextColor3 = Color3.fromRGB(255, 255, 255),
        Font = Enum.Font.Gotham,
        TextSize = 14
    })
    
    createElement("UICorner", { CornerRadius = UDim.new(0, 4), Parent = dropdownButton })
    
    dropdown.SetValue = function(value)
        if options.Multi then
            dropdown.Value = value
            local selected = {}
            for k, v in pairs(value) do
                if v then
                    table.insert(selected, k)
                end
            end
            dropdownButton.Text = table.concat(selected, ", ") or "None"
        else
            dropdown.Value = value
            dropdownButton.Text = tostring(value)
        end
        if options.Callback then
            options.Callback(value)
        end
    end
    
    dropdownButton.MouseButton1Click:Connect(function()
        local dropdownFrame = createElement("Frame", {
            Parent = self.ScreenGui,
            Size = UDim2.new(0, 200, 0, math.min(#options.Values * 20 + 10, 100)),
            Position = UDim2.new(0, dropdownButton.AbsolutePosition.X, 0, dropdownButton.AbsolutePosition.Y + 30),
            BackgroundColor3 = Color3.fromRGB(40, 40, 40),
            BorderSizePixel = 0
        })
        
        createElement("UICorner", { CornerRadius = UDim.new(0, 4), Parent = dropdownFrame })
        local list = createElement("UIListLayout", { Parent = dropdownFrame, SortOrder = Enum.SortOrder.LayoutOrder })
        
        for _, value in ipairs(options.Values) do
            local item = createElement("TextButton", {
                Parent = dropdownFrame,
                Size = UDim2.new(1, 0, 0, 20),
                BackgroundColor3 = Color3.fromRGB(50, 50, 50),
                Text = tostring(value),
                TextColor3 = Color3.fromRGB(255, 255, 255),
                Font = Enum.Font.Gotham,
                TextSize = 14
            })
            
            createElement("UICorner", { CornerRadius = UDim.new(0, 4), Parent = item })
            
            item.MouseButton1Click:Connect(function()
                if options.Multi then
                    dropdown.Value[value] = not dropdown.Value[value]
                    dropdown:SetValue(dropdown.Value)
                else
                    dropdown:SetValue(value)
                    dropdownFrame:Destroy()
                end
            end)
        end
        
        local closeConnection
        closeConnection = game:GetService("UserInputService").InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                local mouse = game.Players.LocalPlayer:GetMouse()
                if not (mouse.X >= dropdownFrame.AbsolutePosition.X and mouse.X <= dropdownFrame.AbsolutePosition.X + dropdownFrame.AbsoluteSize.X and
                        mouse.Y >= dropdownFrame.AbsolutePosition.Y and mouse.Y <= dropdownFrame.AbsolutePosition.Y + dropdownFrame.AbsoluteSize.Y) then
                    dropdownFrame:Destroy()
                    closeConnection:Disconnect()
                end
            end
        end)
    end)
    
    SimpleTabGui.Options[id] = dropdown
    self.Content.CanvasSize = UDim2.new(0, 0, 0, self.ContentList.AbsoluteContentSize.Y)
    return dropdown
end

return SimpleTabGui
```

#### Исправления в коде:
- **Метод `AddDropdown`**:
  - Исправлена строка `dropdownButton.Text = table.concat({k for k, v in pairs(value) if v}, ", ")`. Теперь используется правильный Lua-код:
    ```lua
    local selected = {}
    for k, v in pairs(value) do
        if v then
            table.insert(selected, k)
        end
    end
    dropdownButton.Text = table.concat(selected, ", ") or "None"
    ```
    Это собирает выбранные значения из таблицы `value` (для многоэлементного выпадающего списка) и отображает их через запятую.
- **Размер выпадающего списка**:
  - Добавлено динамическое вычисление высоты фрейма выпадающего списка: `math.min(#options.Values * 20 + 10, 100)`, чтобы он не был слишком большим.
- **Прочее**:
  - Проверены все методы (`CreateWindow`, `AddTab`, `AddParagraph`, `AddButton`, `AddToggle`, `AddSlider`) — они синтаксически корректны.
  - Убедились, что все `}` пары сбалансированы.

---

### Шаг 4: Код для экзекьютора (`LoadGui.lua`)

Этот код загружает библиотеку с GitHub и создаёт GUI, аналогичное Fluent, с вкладками, уведомлениями и элементами управления, как в вашем примере. Вставьте его в экзекьютор (например, Synapse X) или в `LocalScript` в Roblox Studio.

<xaiArtifact artifact_id="f2f3fddc-4e74-43ea-b3a2-1f4cc081f3c0" artifact_version_id="d9c063ec-4671-4eec-9c17-d6ceb1004ed5" title="LoadGui.lua" contentType="text/lua">
```lua
local HttpService = game:GetService("HttpService")

-- URL библиотеки на GitHub (замените на ваш)
local LIBRARY_URL = "https://raw.githubusercontent.com/yourusername/SimpleTabGui/main/SimpleTabGui.lua"

-- Загрузка библиотеки
local function loadLibrary()
    local success, result = pcall(function()
        return HttpService:GetAsync(LIBRARY_URL)
    end)
    
    if success then
        local func, err = loadstring(result)
        if func then
            return func()
        else
            warn("Ошибка загрузки библиотеки: " .. tostring(err))
            return nil
        end
    else
        warn("Ошибка получения библиотеки: " .. tostring(result))
        return nil
    end
end

-- Загружаем библиотеку
local SimpleTabGui = loadLibrary()

if SimpleTabGui then
    -- Создаём окно
    local Window = SimpleTabGui:CreateWindow({
        Title = "SimpleTabGui " .. SimpleTabGui.Version,
        SubTitle = "by Grok",
        TabWidth = 160,
        Size = UDim2.fromOffset(580, 460)
    })
    
    -- Добавляем вкладки
    local Tabs = {
        Main = Window:AddTab({ Title = "Main", Icon = "" }),
        Settings = Window:AddTab({ Title = "Settings", Icon = "" })
    }
    
    local Options = SimpleTabGui.Options
    
    -- Уведомление о загрузке
    SimpleTabGui:Notify({
        Title = "SimpleTabGui",
        Content = "Скрипт загружен!",
        Duration = 8
    })
    
    -- Добавляем параграф
    Tabs.Main:AddParagraph({
        Title = "Параграф",
        Content = "Это параграф.\nВторая строка!"
    })
    
    -- Добавляем кнопку
    Tabs.Main:AddButton({
        Title = "Кнопка",
        Description = "Очень важная кнопка",
        Callback = function()
            print("Кнопка нажата!")
        end
    })
    
    -- Добавляем переключатель
    local Toggle = Tabs.Main:AddToggle("MyToggle", {
        Title = "Переключатель",
        Default = false,
        Callback = function(value)
            print("Переключатель изменён:", value)
        end
    })
    
    Toggle:SetValue(false)
    
    -- Добавляем слайдер
    local Slider = Tabs.Main:AddSlider("Slider", {
        Title = "Слайдер",
        Description = "Это слайдер",
        Default = 2,
        Min = 0,
        Max = 5,
        Rounding = 1,
        Callback = function(value)
            print("Слайдер изменён:", value)
        end
    })
    
    Slider:SetValue(3)
    
    -- Добавляем выпадающий список
    local Dropdown = Tabs.Main:AddDropdown("Dropdown", {
        Title = "Выпадающий список",
        Values = {"один", "два", "три", "четыре", "пять"},
        Multi = false,
        Default = "один",
        Callback = function(value)
            print("Выпадающий список изменён:", value)
        end
    })
    
    Dropdown:SetValue("четыре")
    
    -- Добавляем многоэлементный выпадающий список
    local MultiDropdown = Tabs.Main:AddDropdown("MultiDropdown", {
        Title = "Многоэлементный список",
        Description = "Можно выбрать несколько значений",
        Values = {"один", "два", "три", "четыре", "пять"},
        Multi = true,
        Default = {["один"] = true, ["три"] = true},
        Callback = function(value)
            local selected = {}
            for k, v in pairs(value) do
                if v then
                    table.insert(selected, k)
                end
            end
            print("Многоэлементный список изменён:", table.concat(selected, ", "))
        end
    })
    
    MultiDropdown:SetValue({
        два = true,
        четыре = true,
        один = false
    })
    
    -- Выбираем первую вкладку
    Window:SelectTab(1)
    
    print("GUI успешно загружено!")
else
    warn("Не удалось загрузить библиотеку. Проверьте URL.")
end
